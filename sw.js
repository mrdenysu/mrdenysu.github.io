const version="1.0.3-"+Math.round(100*Math.random()),assetsUrls=["/index.html","/about.html","/offline.html","/assets/js/main.js","/assets/css/main.css","/assets/img/3.jpg","/assets/img/logo.svg","/assets/img/favicon.ico"],staticCacheName=`s-${version}`,dynamicCacheName=`d-${version}`;async function cacheFirst(a){return await caches.match(a)??await fetch(a)}async function networkFirst(a){const t=await caches.open(dynamicCacheName);try{const s=await fetch(a);return await t.put(a,s.clone()),s}catch(s){return await t.match(a)??await caches.match("/offline.html")}}self.addEventListener("install",(async a=>{console.log("{SW}: install");const t=await caches.open(staticCacheName);await t.addAll(assetsUrls)})),self.addEventListener("activate",(async a=>{console.log("{SW}: activate");const t=await caches.keys();await Promise.all(t.filter((a=>a!==staticCacheName)).map((a=>caches.delete(a))))})),self.addEventListener("fetch",(async a=>{console.log("{SW}: fetch");const{request:t}=a;new URL(t.url).origin===location.origin?a.respondWith(cacheFirst(t)):a.respondWith(networkFirst(t))}));
//# sourceMappingURL=sw.js.map