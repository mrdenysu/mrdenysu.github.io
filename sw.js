const version="1.0.4",assetsUrls=["/index.html","/about.html","/offline.html","/assets/js/main.js","/assets/css/main.css","/assets/img/3.jpg","/assets/img/logo.svg","/assets/img/favicon.ico"];let _version="1.0.4";location.href.includes("localhost")&&(_version+="-dev:"+Math.round(100*Math.random()));const staticCacheName=`s-${_version}`,dynamicCacheName=`d-${_version}`;async function cacheFirst(t){return await caches.match(t)??await fetch(t)}async function networkFirst(t){const a=await caches.open(dynamicCacheName);try{const e=await fetch(t);return await a.put(t,e.clone()),e}catch(e){return await a.match(t)??await caches.match("/offline.html")}}async function network(t){try{return await fetch(t)}catch(t){console.error(t)}}self.addEventListener("install",(async t=>{console.log("{SW}: install");const a=await caches.open(staticCacheName);await a.addAll(assetsUrls)})),self.addEventListener("activate",(async t=>{console.log("{SW}: activate");const a=await caches.keys();await Promise.all(a.filter((t=>t!==staticCacheName)).map((t=>caches.delete(t))))})),self.addEventListener("fetch",(async t=>{console.log("{SW}: fetch");const{request:a}=t;new URL(a.url).origin===location.origin?t.respondWith(cacheFirst(a)):"1.0.4"!==_version?t.respondWith(network(a)):t.respondWith(networkFirst(a))}));
//# sourceMappingURL=sw.js.map